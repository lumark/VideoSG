// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segmentation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "segmentation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace segmentation {

namespace {

const ::google::protobuf::Descriptor* RegionFeatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionFeatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Rasterization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Rasterization_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Rasterization_ScanInterval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Rasterization_ScanInterval_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_ShapeMoments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_ShapeMoments_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_VectorMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_VectorMesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Vectorization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Vectorization_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Region2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Region2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_CompoundRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_CompoundRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_HierarchyLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_HierarchyLevel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SegmentationDesc_Connectedness_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AppearanceFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextureFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextureFeature_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_segmentation_2eproto() {
  protobuf_AddDesc_segmentation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "segmentation.proto");
  GOOGLE_CHECK(file != NULL);
  RegionFeatures_descriptor_ = file->message_type(0);
  static const int RegionFeatures_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionFeatures, id_),
  };
  RegionFeatures_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionFeatures_descriptor_,
      RegionFeatures::default_instance_,
      RegionFeatures_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionFeatures, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionFeatures, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionFeatures, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionFeatures));
  SegmentationDesc_descriptor_ = file->message_type(1);
  static const int SegmentationDesc_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, hierarchy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, frame_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, frame_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, chunk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, overlap_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, chunk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, hierarchy_frame_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, vector_mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, connectedness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, rasterization_removed_),
  };
  SegmentationDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_descriptor_,
      SegmentationDesc::default_instance_,
      SegmentationDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc));
  SegmentationDesc_Rasterization_descriptor_ = SegmentationDesc_descriptor_->nested_type(0);
  static const int SegmentationDesc_Rasterization_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization, scan_inter_),
  };
  SegmentationDesc_Rasterization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Rasterization_descriptor_,
      SegmentationDesc_Rasterization::default_instance_,
      SegmentationDesc_Rasterization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Rasterization));
  SegmentationDesc_Rasterization_ScanInterval_descriptor_ = SegmentationDesc_Rasterization_descriptor_->nested_type(0);
  static const int SegmentationDesc_Rasterization_ScanInterval_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization_ScanInterval, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization_ScanInterval, left_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization_ScanInterval, right_x_),
  };
  SegmentationDesc_Rasterization_ScanInterval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Rasterization_ScanInterval_descriptor_,
      SegmentationDesc_Rasterization_ScanInterval::default_instance_,
      SegmentationDesc_Rasterization_ScanInterval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization_ScanInterval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Rasterization_ScanInterval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Rasterization_ScanInterval));
  SegmentationDesc_ShapeMoments_descriptor_ = SegmentationDesc_descriptor_->nested_type(1);
  static const int SegmentationDesc_ShapeMoments_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, mean_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, mean_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, moment_xx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, moment_xy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, moment_yy_),
  };
  SegmentationDesc_ShapeMoments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_ShapeMoments_descriptor_,
      SegmentationDesc_ShapeMoments::default_instance_,
      SegmentationDesc_ShapeMoments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_ShapeMoments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_ShapeMoments));
  SegmentationDesc_VectorMesh_descriptor_ = SegmentationDesc_descriptor_->nested_type(2);
  static const int SegmentationDesc_VectorMesh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_VectorMesh, coord_),
  };
  SegmentationDesc_VectorMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_VectorMesh_descriptor_,
      SegmentationDesc_VectorMesh::default_instance_,
      SegmentationDesc_VectorMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_VectorMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_VectorMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_VectorMesh));
  SegmentationDesc_Polygon_descriptor_ = SegmentationDesc_descriptor_->nested_type(3);
  static const int SegmentationDesc_Polygon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Polygon, coord_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Polygon, hole_),
  };
  SegmentationDesc_Polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Polygon_descriptor_,
      SegmentationDesc_Polygon::default_instance_,
      SegmentationDesc_Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Polygon));
  SegmentationDesc_Vectorization_descriptor_ = SegmentationDesc_descriptor_->nested_type(4);
  static const int SegmentationDesc_Vectorization_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Vectorization, polygon_),
  };
  SegmentationDesc_Vectorization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Vectorization_descriptor_,
      SegmentationDesc_Vectorization::default_instance_,
      SegmentationDesc_Vectorization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Vectorization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Vectorization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Vectorization));
  SegmentationDesc_Region2D_descriptor_ = SegmentationDesc_descriptor_->nested_type(5);
  static const int SegmentationDesc_Region2D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region2D, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region2D, raster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region2D, shape_moments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region2D, vectorization_),
  };
  SegmentationDesc_Region2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Region2D_descriptor_,
      SegmentationDesc_Region2D::default_instance_,
      SegmentationDesc_Region2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Region2D));
  SegmentationDesc_CompoundRegion_descriptor_ = SegmentationDesc_descriptor_->nested_type(6);
  static const int SegmentationDesc_CompoundRegion_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, neighbor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, child_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, start_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, end_frame_),
  };
  SegmentationDesc_CompoundRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_CompoundRegion_descriptor_,
      SegmentationDesc_CompoundRegion::default_instance_,
      SegmentationDesc_CompoundRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_CompoundRegion));
  SegmentationDesc_HierarchyLevel_descriptor_ = SegmentationDesc_descriptor_->nested_type(7);
  static const int SegmentationDesc_HierarchyLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_HierarchyLevel, region_),
  };
  SegmentationDesc_HierarchyLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_HierarchyLevel_descriptor_,
      SegmentationDesc_HierarchyLevel::default_instance_,
      SegmentationDesc_HierarchyLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_HierarchyLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_HierarchyLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_HierarchyLevel));
  SegmentationDesc_Connectedness_descriptor_ = SegmentationDesc_descriptor_->enum_type(0);
  AppearanceFeature_descriptor_ = file->message_type(2);
  static const int AppearanceFeature_offsets_[1] = {
  };
  AppearanceFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceFeature_descriptor_,
      AppearanceFeature::default_instance_,
      AppearanceFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceFeature));
  FlowFeature_descriptor_ = file->message_type(3);
  static const int FlowFeature_offsets_[1] = {
  };
  FlowFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowFeature_descriptor_,
      FlowFeature::default_instance_,
      FlowFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowFeature));
  TextureFeature_descriptor_ = file->message_type(4);
  static const int TextureFeature_offsets_[1] = {
  };
  TextureFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextureFeature_descriptor_,
      TextureFeature::default_instance_,
      TextureFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextureFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextureFeature));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_segmentation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionFeatures_descriptor_, &RegionFeatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_descriptor_, &SegmentationDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Rasterization_descriptor_, &SegmentationDesc_Rasterization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Rasterization_ScanInterval_descriptor_, &SegmentationDesc_Rasterization_ScanInterval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_ShapeMoments_descriptor_, &SegmentationDesc_ShapeMoments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_VectorMesh_descriptor_, &SegmentationDesc_VectorMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Polygon_descriptor_, &SegmentationDesc_Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Vectorization_descriptor_, &SegmentationDesc_Vectorization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Region2D_descriptor_, &SegmentationDesc_Region2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_CompoundRegion_descriptor_, &SegmentationDesc_CompoundRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_HierarchyLevel_descriptor_, &SegmentationDesc_HierarchyLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceFeature_descriptor_, &AppearanceFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowFeature_descriptor_, &FlowFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextureFeature_descriptor_, &TextureFeature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_segmentation_2eproto() {
  delete RegionFeatures::default_instance_;
  delete RegionFeatures_reflection_;
  delete SegmentationDesc::default_instance_;
  delete SegmentationDesc_reflection_;
  delete SegmentationDesc_Rasterization::default_instance_;
  delete SegmentationDesc_Rasterization_reflection_;
  delete SegmentationDesc_Rasterization_ScanInterval::default_instance_;
  delete SegmentationDesc_Rasterization_ScanInterval_reflection_;
  delete SegmentationDesc_ShapeMoments::default_instance_;
  delete SegmentationDesc_ShapeMoments_reflection_;
  delete SegmentationDesc_VectorMesh::default_instance_;
  delete SegmentationDesc_VectorMesh_reflection_;
  delete SegmentationDesc_Polygon::default_instance_;
  delete SegmentationDesc_Polygon_reflection_;
  delete SegmentationDesc_Vectorization::default_instance_;
  delete SegmentationDesc_Vectorization_reflection_;
  delete SegmentationDesc_Region2D::default_instance_;
  delete SegmentationDesc_Region2D_reflection_;
  delete SegmentationDesc_CompoundRegion::default_instance_;
  delete SegmentationDesc_CompoundRegion_reflection_;
  delete SegmentationDesc_HierarchyLevel::default_instance_;
  delete SegmentationDesc_HierarchyLevel_reflection_;
  delete AppearanceFeature::default_instance_;
  delete AppearanceFeature_reflection_;
  delete FlowFeature::default_instance_;
  delete FlowFeature_reflection_;
  delete TextureFeature::default_instance_;
  delete TextureFeature_reflection_;
}

void protobuf_AddDesc_segmentation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022segmentation.proto\022\014segmentation\"#\n\016Re"
    "gionFeatures\022\n\n\002id\030\001 \002(\007*\005\010\n\020\311\001\"\261\013\n\020Segm"
    "entationDesc\0227\n\006region\030\002 \003(\0132\'.segmentat"
    "ion.SegmentationDesc.Region2D\022@\n\thierarc"
    "hy\030\003 \003(\0132-.segmentation.SegmentationDesc"
    ".HierarchyLevel\022\026\n\013frame_width\030\004 \001(\005:\0010\022"
    "\027\n\014frame_height\030\005 \001(\005:\0010\022\022\n\nchunk_size\030\006"
    " \001(\005\022\025\n\roverlap_start\030\007 \001(\005\022\024\n\010chunk_id\030"
    "\010 \001(\005:\002-1\022\036\n\023hierarchy_frame_idx\030\t \001(\005:\001"
    "0\022.\n\010features\030\n \003(\0132\034.segmentation.Regio"
    "nFeatures\022>\n\013vector_mesh\030\013 \001(\0132).segment"
    "ation.SegmentationDesc.VectorMesh\022O\n\rcon"
    "nectedness\030\014 \001(\0162,.segmentation.Segmenta"
    "tionDesc.Connectedness:\nN4_CONNECT\022$\n\025ra"
    "sterization_removed\030\r \001(\010:\005false\032\232\001\n\rRas"
    "terization\022M\n\nscan_inter\030\001 \003(\01329.segment"
    "ation.SegmentationDesc.Rasterization.Sca"
    "nInterval\032:\n\014ScanInterval\022\t\n\001y\030\001 \002(\005\022\016\n\006"
    "left_x\030\002 \002(\005\022\017\n\007right_x\030\003 \002(\005\032u\n\014ShapeMo"
    "ments\022\014\n\004size\030\001 \001(\002\022\016\n\006mean_x\030\002 \001(\002\022\016\n\006m"
    "ean_y\030\003 \001(\002\022\021\n\tmoment_xx\030\004 \001(\002\022\021\n\tmoment"
    "_xy\030\005 \001(\002\022\021\n\tmoment_yy\030\006 \001(\002\032\037\n\nVectorMe"
    "sh\022\021\n\005coord\030\001 \003(\002B\002\020\001\0325\n\007Polygon\022\025\n\tcoor"
    "d_idx\030\001 \003(\005B\002\020\001\022\023\n\004hole\030\002 \001(\010:\005false\032H\n\r"
    "Vectorization\0227\n\007polygon\030\001 \003(\0132&.segment"
    "ation.SegmentationDesc.Polygon\032\335\001\n\010Regio"
    "n2D\022\n\n\002id\030\001 \002(\005\022<\n\006raster\030\003 \001(\0132,.segmen"
    "tation.SegmentationDesc.Rasterization\022B\n"
    "\rshape_moments\030\005 \001(\0132+.segmentation.Segm"
    "entationDesc.ShapeMoments\022C\n\rvectorizati"
    "on\030\006 \001(\0132,.segmentation.SegmentationDesc"
    ".Vectorization\032\220\001\n\016CompoundRegion\022\n\n\002id\030"
    "\001 \002(\005\022\014\n\004size\030\002 \002(\005\022\023\n\013neighbor_id\030\003 \003(\005"
    "\022\025\n\tparent_id\030\004 \001(\005:\002-1\022\020\n\010child_id\030\005 \003("
    "\005\022\023\n\013start_frame\030\006 \001(\005\022\021\n\tend_frame\030\007 \001("
    "\005\032O\n\016HierarchyLevel\022=\n\006region\030\002 \003(\0132-.se"
    "gmentation.SegmentationDesc.CompoundRegi"
    "on\"/\n\rConnectedness\022\016\n\nN4_CONNECT\020\001\022\016\n\nN"
    "8_CONNECT\020\002\"f\n\021AppearanceFeature2Q\n\nappe"
    "arance\022\034.segmentation.RegionFeatures\030\n \001"
    "(\0132\037.segmentation.AppearanceFeature\"T\n\013F"
    "lowFeature2E\n\004flow\022\034.segmentation.Region"
    "Features\030\013 \001(\0132\031.segmentation.FlowFeatur"
    "e\"]\n\016TextureFeature2K\n\007texture\022\034.segment"
    "ation.RegionFeatures\030\014 \001(\0132\034.segmentatio"
    "n.TextureFeature", 1816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "segmentation.proto", &protobuf_RegisterTypes);
  RegionFeatures::default_instance_ = new RegionFeatures();
  SegmentationDesc::default_instance_ = new SegmentationDesc();
  SegmentationDesc_Rasterization::default_instance_ = new SegmentationDesc_Rasterization();
  SegmentationDesc_Rasterization_ScanInterval::default_instance_ = new SegmentationDesc_Rasterization_ScanInterval();
  SegmentationDesc_ShapeMoments::default_instance_ = new SegmentationDesc_ShapeMoments();
  SegmentationDesc_VectorMesh::default_instance_ = new SegmentationDesc_VectorMesh();
  SegmentationDesc_Polygon::default_instance_ = new SegmentationDesc_Polygon();
  SegmentationDesc_Vectorization::default_instance_ = new SegmentationDesc_Vectorization();
  SegmentationDesc_Region2D::default_instance_ = new SegmentationDesc_Region2D();
  SegmentationDesc_CompoundRegion::default_instance_ = new SegmentationDesc_CompoundRegion();
  SegmentationDesc_HierarchyLevel::default_instance_ = new SegmentationDesc_HierarchyLevel();
  AppearanceFeature::default_instance_ = new AppearanceFeature();
  FlowFeature::default_instance_ = new FlowFeature();
  TextureFeature::default_instance_ = new TextureFeature();
  RegionFeatures::default_instance_->InitAsDefaultInstance();
  SegmentationDesc::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Rasterization::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Rasterization_ScanInterval::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_ShapeMoments::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_VectorMesh::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Polygon::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Vectorization::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Region2D::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_CompoundRegion::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_HierarchyLevel::default_instance_->InitAsDefaultInstance();
  AppearanceFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::segmentation::RegionFeatures::default_instance(),
    10, 11, false, false,
    &::segmentation::AppearanceFeature::default_instance());
  FlowFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::segmentation::RegionFeatures::default_instance(),
    11, 11, false, false,
    &::segmentation::FlowFeature::default_instance());
  TextureFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::segmentation::RegionFeatures::default_instance(),
    12, 11, false, false,
    &::segmentation::TextureFeature::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_segmentation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_segmentation_2eproto {
  StaticDescriptorInitializer_segmentation_2eproto() {
    protobuf_AddDesc_segmentation_2eproto();
  }
} static_descriptor_initializer_segmentation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegionFeatures::kIdFieldNumber;
#endif  // !_MSC_VER

RegionFeatures::RegionFeatures()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionFeatures::InitAsDefaultInstance() {
}

RegionFeatures::RegionFeatures(const RegionFeatures& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionFeatures::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionFeatures::~RegionFeatures() {
  SharedDtor();
}

void RegionFeatures::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionFeatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionFeatures_descriptor_;
}

const RegionFeatures& RegionFeatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

RegionFeatures* RegionFeatures::default_instance_ = NULL;

RegionFeatures* RegionFeatures::New() const {
  return new RegionFeatures;
}

void RegionFeatures::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80u <= tag && tag < 1608u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // Extension range [10, 201)
  _extensions_.SerializeWithCachedSizes(
      10, 201, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionFeatures::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // Extension range [10, 201)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10, 201, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionFeatures::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionFeatures::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionFeatures* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionFeatures*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionFeatures::MergeFrom(const RegionFeatures& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionFeatures::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFeatures::CopyFrom(const RegionFeatures& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFeatures::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RegionFeatures::Swap(RegionFeatures* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RegionFeatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionFeatures_descriptor_;
  metadata.reflection = RegionFeatures_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SegmentationDesc_Connectedness_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Connectedness_descriptor_;
}
bool SegmentationDesc_Connectedness_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SegmentationDesc_Connectedness SegmentationDesc::N4_CONNECT;
const SegmentationDesc_Connectedness SegmentationDesc::N8_CONNECT;
const SegmentationDesc_Connectedness SegmentationDesc::Connectedness_MIN;
const SegmentationDesc_Connectedness SegmentationDesc::Connectedness_MAX;
const int SegmentationDesc::Connectedness_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SegmentationDesc_Rasterization_ScanInterval::kYFieldNumber;
const int SegmentationDesc_Rasterization_ScanInterval::kLeftXFieldNumber;
const int SegmentationDesc_Rasterization_ScanInterval::kRightXFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Rasterization_ScanInterval::SegmentationDesc_Rasterization_ScanInterval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Rasterization_ScanInterval::InitAsDefaultInstance() {
}

SegmentationDesc_Rasterization_ScanInterval::SegmentationDesc_Rasterization_ScanInterval(const SegmentationDesc_Rasterization_ScanInterval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Rasterization_ScanInterval::SharedCtor() {
  _cached_size_ = 0;
  y_ = 0;
  left_x_ = 0;
  right_x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Rasterization_ScanInterval::~SegmentationDesc_Rasterization_ScanInterval() {
  SharedDtor();
}

void SegmentationDesc_Rasterization_ScanInterval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Rasterization_ScanInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Rasterization_ScanInterval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Rasterization_ScanInterval_descriptor_;
}

const SegmentationDesc_Rasterization_ScanInterval& SegmentationDesc_Rasterization_ScanInterval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Rasterization_ScanInterval* SegmentationDesc_Rasterization_ScanInterval::default_instance_ = NULL;

SegmentationDesc_Rasterization_ScanInterval* SegmentationDesc_Rasterization_ScanInterval::New() const {
  return new SegmentationDesc_Rasterization_ScanInterval;
}

void SegmentationDesc_Rasterization_ScanInterval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    y_ = 0;
    left_x_ = 0;
    right_x_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Rasterization_ScanInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 y = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_x;
        break;
      }

      // required int32 left_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_x_)));
          set_has_left_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_right_x;
        break;
      }

      // required int32 right_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_x_)));
          set_has_right_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Rasterization_ScanInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 y = 1;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->y(), output);
  }

  // required int32 left_x = 2;
  if (has_left_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_x(), output);
  }

  // required int32 right_x = 3;
  if (has_right_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right_x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Rasterization_ScanInterval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 y = 1;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->y(), target);
  }

  // required int32 left_x = 2;
  if (has_left_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_x(), target);
  }

  // required int32 right_x = 3;
  if (has_right_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right_x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Rasterization_ScanInterval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 y = 1;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 left_x = 2;
    if (has_left_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_x());
    }

    // required int32 right_x = 3;
    if (has_right_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_x());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Rasterization_ScanInterval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Rasterization_ScanInterval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Rasterization_ScanInterval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Rasterization_ScanInterval::MergeFrom(const SegmentationDesc_Rasterization_ScanInterval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_left_x()) {
      set_left_x(from.left_x());
    }
    if (from.has_right_x()) {
      set_right_x(from.right_x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Rasterization_ScanInterval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Rasterization_ScanInterval::CopyFrom(const SegmentationDesc_Rasterization_ScanInterval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Rasterization_ScanInterval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SegmentationDesc_Rasterization_ScanInterval::Swap(SegmentationDesc_Rasterization_ScanInterval* other) {
  if (other != this) {
    std::swap(y_, other->y_);
    std::swap(left_x_, other->left_x_);
    std::swap(right_x_, other->right_x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Rasterization_ScanInterval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Rasterization_ScanInterval_descriptor_;
  metadata.reflection = SegmentationDesc_Rasterization_ScanInterval_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Rasterization::kScanInterFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Rasterization::SegmentationDesc_Rasterization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Rasterization::InitAsDefaultInstance() {
}

SegmentationDesc_Rasterization::SegmentationDesc_Rasterization(const SegmentationDesc_Rasterization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Rasterization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Rasterization::~SegmentationDesc_Rasterization() {
  SharedDtor();
}

void SegmentationDesc_Rasterization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Rasterization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Rasterization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Rasterization_descriptor_;
}

const SegmentationDesc_Rasterization& SegmentationDesc_Rasterization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Rasterization* SegmentationDesc_Rasterization::default_instance_ = NULL;

SegmentationDesc_Rasterization* SegmentationDesc_Rasterization::New() const {
  return new SegmentationDesc_Rasterization;
}

void SegmentationDesc_Rasterization::Clear() {
  scan_inter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Rasterization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .segmentation.SegmentationDesc.Rasterization.ScanInterval scan_inter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_inter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scan_inter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_scan_inter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Rasterization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .segmentation.SegmentationDesc.Rasterization.ScanInterval scan_inter = 1;
  for (int i = 0; i < this->scan_inter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scan_inter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Rasterization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .segmentation.SegmentationDesc.Rasterization.ScanInterval scan_inter = 1;
  for (int i = 0; i < this->scan_inter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scan_inter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Rasterization::ByteSize() const {
  int total_size = 0;

  // repeated .segmentation.SegmentationDesc.Rasterization.ScanInterval scan_inter = 1;
  total_size += 1 * this->scan_inter_size();
  for (int i = 0; i < this->scan_inter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scan_inter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Rasterization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Rasterization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Rasterization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Rasterization::MergeFrom(const SegmentationDesc_Rasterization& from) {
  GOOGLE_CHECK_NE(&from, this);
  scan_inter_.MergeFrom(from.scan_inter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Rasterization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Rasterization::CopyFrom(const SegmentationDesc_Rasterization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Rasterization::IsInitialized() const {

  for (int i = 0; i < scan_inter_size(); i++) {
    if (!this->scan_inter(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc_Rasterization::Swap(SegmentationDesc_Rasterization* other) {
  if (other != this) {
    scan_inter_.Swap(&other->scan_inter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Rasterization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Rasterization_descriptor_;
  metadata.reflection = SegmentationDesc_Rasterization_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_ShapeMoments::kSizeFieldNumber;
const int SegmentationDesc_ShapeMoments::kMeanXFieldNumber;
const int SegmentationDesc_ShapeMoments::kMeanYFieldNumber;
const int SegmentationDesc_ShapeMoments::kMomentXxFieldNumber;
const int SegmentationDesc_ShapeMoments::kMomentXyFieldNumber;
const int SegmentationDesc_ShapeMoments::kMomentYyFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_ShapeMoments::SegmentationDesc_ShapeMoments()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_ShapeMoments::InitAsDefaultInstance() {
}

SegmentationDesc_ShapeMoments::SegmentationDesc_ShapeMoments(const SegmentationDesc_ShapeMoments& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_ShapeMoments::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  mean_x_ = 0;
  mean_y_ = 0;
  moment_xx_ = 0;
  moment_xy_ = 0;
  moment_yy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_ShapeMoments::~SegmentationDesc_ShapeMoments() {
  SharedDtor();
}

void SegmentationDesc_ShapeMoments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_ShapeMoments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_ShapeMoments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_ShapeMoments_descriptor_;
}

const SegmentationDesc_ShapeMoments& SegmentationDesc_ShapeMoments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_ShapeMoments* SegmentationDesc_ShapeMoments::default_instance_ = NULL;

SegmentationDesc_ShapeMoments* SegmentationDesc_ShapeMoments::New() const {
  return new SegmentationDesc_ShapeMoments;
}

void SegmentationDesc_ShapeMoments::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
    mean_x_ = 0;
    mean_y_ = 0;
    moment_xx_ = 0;
    moment_xy_ = 0;
    moment_yy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_ShapeMoments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_mean_x;
        break;
      }

      // optional float mean_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mean_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_x_)));
          set_has_mean_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mean_y;
        break;
      }

      // optional float mean_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mean_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_y_)));
          set_has_mean_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_moment_xx;
        break;
      }

      // optional float moment_xx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moment_xx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moment_xx_)));
          set_has_moment_xx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_moment_xy;
        break;
      }

      // optional float moment_xy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moment_xy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moment_xy_)));
          set_has_moment_xy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_moment_yy;
        break;
      }

      // optional float moment_yy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moment_yy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moment_yy_)));
          set_has_moment_yy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_ShapeMoments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->size(), output);
  }

  // optional float mean_x = 2;
  if (has_mean_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean_x(), output);
  }

  // optional float mean_y = 3;
  if (has_mean_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mean_y(), output);
  }

  // optional float moment_xx = 4;
  if (has_moment_xx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->moment_xx(), output);
  }

  // optional float moment_xy = 5;
  if (has_moment_xy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->moment_xy(), output);
  }

  // optional float moment_yy = 6;
  if (has_moment_yy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->moment_yy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_ShapeMoments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->size(), target);
  }

  // optional float mean_x = 2;
  if (has_mean_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean_x(), target);
  }

  // optional float mean_y = 3;
  if (has_mean_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mean_y(), target);
  }

  // optional float moment_xx = 4;
  if (has_moment_xx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->moment_xx(), target);
  }

  // optional float moment_xy = 5;
  if (has_moment_xy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->moment_xy(), target);
  }

  // optional float moment_yy = 6;
  if (has_moment_yy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->moment_yy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_ShapeMoments::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float size = 1;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional float mean_x = 2;
    if (has_mean_x()) {
      total_size += 1 + 4;
    }

    // optional float mean_y = 3;
    if (has_mean_y()) {
      total_size += 1 + 4;
    }

    // optional float moment_xx = 4;
    if (has_moment_xx()) {
      total_size += 1 + 4;
    }

    // optional float moment_xy = 5;
    if (has_moment_xy()) {
      total_size += 1 + 4;
    }

    // optional float moment_yy = 6;
    if (has_moment_yy()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_ShapeMoments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_ShapeMoments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_ShapeMoments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_ShapeMoments::MergeFrom(const SegmentationDesc_ShapeMoments& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_mean_x()) {
      set_mean_x(from.mean_x());
    }
    if (from.has_mean_y()) {
      set_mean_y(from.mean_y());
    }
    if (from.has_moment_xx()) {
      set_moment_xx(from.moment_xx());
    }
    if (from.has_moment_xy()) {
      set_moment_xy(from.moment_xy());
    }
    if (from.has_moment_yy()) {
      set_moment_yy(from.moment_yy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_ShapeMoments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_ShapeMoments::CopyFrom(const SegmentationDesc_ShapeMoments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_ShapeMoments::IsInitialized() const {

  return true;
}

void SegmentationDesc_ShapeMoments::Swap(SegmentationDesc_ShapeMoments* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(mean_x_, other->mean_x_);
    std::swap(mean_y_, other->mean_y_);
    std::swap(moment_xx_, other->moment_xx_);
    std::swap(moment_xy_, other->moment_xy_);
    std::swap(moment_yy_, other->moment_yy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_ShapeMoments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_ShapeMoments_descriptor_;
  metadata.reflection = SegmentationDesc_ShapeMoments_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_VectorMesh::kCoordFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_VectorMesh::SegmentationDesc_VectorMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_VectorMesh::InitAsDefaultInstance() {
}

SegmentationDesc_VectorMesh::SegmentationDesc_VectorMesh(const SegmentationDesc_VectorMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_VectorMesh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_VectorMesh::~SegmentationDesc_VectorMesh() {
  SharedDtor();
}

void SegmentationDesc_VectorMesh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_VectorMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_VectorMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_VectorMesh_descriptor_;
}

const SegmentationDesc_VectorMesh& SegmentationDesc_VectorMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_VectorMesh* SegmentationDesc_VectorMesh::default_instance_ = NULL;

SegmentationDesc_VectorMesh* SegmentationDesc_VectorMesh::New() const {
  return new SegmentationDesc_VectorMesh;
}

void SegmentationDesc_VectorMesh::Clear() {
  coord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_VectorMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float coord = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coord())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_coord())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_VectorMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float coord = 1 [packed = true];
  if (this->coord_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coord_cached_byte_size_);
  }
  for (int i = 0; i < this->coord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->coord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_VectorMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float coord = 1 [packed = true];
  if (this->coord_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _coord_cached_byte_size_, target);
  }
  for (int i = 0; i < this->coord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->coord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_VectorMesh::ByteSize() const {
  int total_size = 0;

  // repeated float coord = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->coord_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _coord_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_VectorMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_VectorMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_VectorMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_VectorMesh::MergeFrom(const SegmentationDesc_VectorMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  coord_.MergeFrom(from.coord_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_VectorMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_VectorMesh::CopyFrom(const SegmentationDesc_VectorMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_VectorMesh::IsInitialized() const {

  return true;
}

void SegmentationDesc_VectorMesh::Swap(SegmentationDesc_VectorMesh* other) {
  if (other != this) {
    coord_.Swap(&other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_VectorMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_VectorMesh_descriptor_;
  metadata.reflection = SegmentationDesc_VectorMesh_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Polygon::kCoordIdxFieldNumber;
const int SegmentationDesc_Polygon::kHoleFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Polygon::SegmentationDesc_Polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Polygon::InitAsDefaultInstance() {
}

SegmentationDesc_Polygon::SegmentationDesc_Polygon(const SegmentationDesc_Polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Polygon::SharedCtor() {
  _cached_size_ = 0;
  hole_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Polygon::~SegmentationDesc_Polygon() {
  SharedDtor();
}

void SegmentationDesc_Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Polygon_descriptor_;
}

const SegmentationDesc_Polygon& SegmentationDesc_Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Polygon* SegmentationDesc_Polygon::default_instance_ = NULL;

SegmentationDesc_Polygon* SegmentationDesc_Polygon::New() const {
  return new SegmentationDesc_Polygon;
}

void SegmentationDesc_Polygon::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    hole_ = false;
  }
  coord_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 coord_idx = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_coord_idx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_coord_idx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole;
        break;
      }

      // optional bool hole = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hole_)));
          set_has_hole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 coord_idx = 1 [packed = true];
  if (this->coord_idx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coord_idx_cached_byte_size_);
  }
  for (int i = 0; i < this->coord_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->coord_idx(i), output);
  }

  // optional bool hole = 2 [default = false];
  if (has_hole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hole(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 coord_idx = 1 [packed = true];
  if (this->coord_idx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _coord_idx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->coord_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->coord_idx(i), target);
  }

  // optional bool hole = 2 [default = false];
  if (has_hole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hole(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Polygon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool hole = 2 [default = false];
    if (has_hole()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 coord_idx = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->coord_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->coord_idx(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _coord_idx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Polygon::MergeFrom(const SegmentationDesc_Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  coord_idx_.MergeFrom(from.coord_idx_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hole()) {
      set_hole(from.hole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Polygon::CopyFrom(const SegmentationDesc_Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Polygon::IsInitialized() const {

  return true;
}

void SegmentationDesc_Polygon::Swap(SegmentationDesc_Polygon* other) {
  if (other != this) {
    coord_idx_.Swap(&other->coord_idx_);
    std::swap(hole_, other->hole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Polygon_descriptor_;
  metadata.reflection = SegmentationDesc_Polygon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Vectorization::kPolygonFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Vectorization::SegmentationDesc_Vectorization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Vectorization::InitAsDefaultInstance() {
}

SegmentationDesc_Vectorization::SegmentationDesc_Vectorization(const SegmentationDesc_Vectorization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Vectorization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Vectorization::~SegmentationDesc_Vectorization() {
  SharedDtor();
}

void SegmentationDesc_Vectorization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Vectorization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Vectorization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Vectorization_descriptor_;
}

const SegmentationDesc_Vectorization& SegmentationDesc_Vectorization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Vectorization* SegmentationDesc_Vectorization::default_instance_ = NULL;

SegmentationDesc_Vectorization* SegmentationDesc_Vectorization::New() const {
  return new SegmentationDesc_Vectorization;
}

void SegmentationDesc_Vectorization::Clear() {
  polygon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Vectorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .segmentation.SegmentationDesc.Polygon polygon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_polygon;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Vectorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .segmentation.SegmentationDesc.Polygon polygon = 1;
  for (int i = 0; i < this->polygon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->polygon(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Vectorization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .segmentation.SegmentationDesc.Polygon polygon = 1;
  for (int i = 0; i < this->polygon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->polygon(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Vectorization::ByteSize() const {
  int total_size = 0;

  // repeated .segmentation.SegmentationDesc.Polygon polygon = 1;
  total_size += 1 * this->polygon_size();
  for (int i = 0; i < this->polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Vectorization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Vectorization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Vectorization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Vectorization::MergeFrom(const SegmentationDesc_Vectorization& from) {
  GOOGLE_CHECK_NE(&from, this);
  polygon_.MergeFrom(from.polygon_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Vectorization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Vectorization::CopyFrom(const SegmentationDesc_Vectorization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Vectorization::IsInitialized() const {

  return true;
}

void SegmentationDesc_Vectorization::Swap(SegmentationDesc_Vectorization* other) {
  if (other != this) {
    polygon_.Swap(&other->polygon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Vectorization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Vectorization_descriptor_;
  metadata.reflection = SegmentationDesc_Vectorization_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Region2D::kIdFieldNumber;
const int SegmentationDesc_Region2D::kRasterFieldNumber;
const int SegmentationDesc_Region2D::kShapeMomentsFieldNumber;
const int SegmentationDesc_Region2D::kVectorizationFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Region2D::SegmentationDesc_Region2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Region2D::InitAsDefaultInstance() {
  raster_ = const_cast< ::segmentation::SegmentationDesc_Rasterization*>(&::segmentation::SegmentationDesc_Rasterization::default_instance());
  shape_moments_ = const_cast< ::segmentation::SegmentationDesc_ShapeMoments*>(&::segmentation::SegmentationDesc_ShapeMoments::default_instance());
  vectorization_ = const_cast< ::segmentation::SegmentationDesc_Vectorization*>(&::segmentation::SegmentationDesc_Vectorization::default_instance());
}

SegmentationDesc_Region2D::SegmentationDesc_Region2D(const SegmentationDesc_Region2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Region2D::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  raster_ = NULL;
  shape_moments_ = NULL;
  vectorization_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Region2D::~SegmentationDesc_Region2D() {
  SharedDtor();
}

void SegmentationDesc_Region2D::SharedDtor() {
  if (this != default_instance_) {
    delete raster_;
    delete shape_moments_;
    delete vectorization_;
  }
}

void SegmentationDesc_Region2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Region2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Region2D_descriptor_;
}

const SegmentationDesc_Region2D& SegmentationDesc_Region2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Region2D* SegmentationDesc_Region2D::default_instance_ = NULL;

SegmentationDesc_Region2D* SegmentationDesc_Region2D::New() const {
  return new SegmentationDesc_Region2D;
}

void SegmentationDesc_Region2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_raster()) {
      if (raster_ != NULL) raster_->::segmentation::SegmentationDesc_Rasterization::Clear();
    }
    if (has_shape_moments()) {
      if (shape_moments_ != NULL) shape_moments_->::segmentation::SegmentationDesc_ShapeMoments::Clear();
    }
    if (has_vectorization()) {
      if (vectorization_ != NULL) vectorization_->::segmentation::SegmentationDesc_Vectorization::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Region2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_raster;
        break;
      }

      // optional .segmentation.SegmentationDesc.Rasterization raster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shape_moments;
        break;
      }

      // optional .segmentation.SegmentationDesc.ShapeMoments shape_moments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_moments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_moments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vectorization;
        break;
      }

      // optional .segmentation.SegmentationDesc.Vectorization vectorization = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vectorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vectorization()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Region2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .segmentation.SegmentationDesc.Rasterization raster = 3;
  if (has_raster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->raster(), output);
  }

  // optional .segmentation.SegmentationDesc.ShapeMoments shape_moments = 5;
  if (has_shape_moments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shape_moments(), output);
  }

  // optional .segmentation.SegmentationDesc.Vectorization vectorization = 6;
  if (has_vectorization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vectorization(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Region2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .segmentation.SegmentationDesc.Rasterization raster = 3;
  if (has_raster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->raster(), target);
  }

  // optional .segmentation.SegmentationDesc.ShapeMoments shape_moments = 5;
  if (has_shape_moments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shape_moments(), target);
  }

  // optional .segmentation.SegmentationDesc.Vectorization vectorization = 6;
  if (has_vectorization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vectorization(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Region2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .segmentation.SegmentationDesc.Rasterization raster = 3;
    if (has_raster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raster());
    }

    // optional .segmentation.SegmentationDesc.ShapeMoments shape_moments = 5;
    if (has_shape_moments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_moments());
    }

    // optional .segmentation.SegmentationDesc.Vectorization vectorization = 6;
    if (has_vectorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vectorization());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Region2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Region2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Region2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Region2D::MergeFrom(const SegmentationDesc_Region2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_raster()) {
      mutable_raster()->::segmentation::SegmentationDesc_Rasterization::MergeFrom(from.raster());
    }
    if (from.has_shape_moments()) {
      mutable_shape_moments()->::segmentation::SegmentationDesc_ShapeMoments::MergeFrom(from.shape_moments());
    }
    if (from.has_vectorization()) {
      mutable_vectorization()->::segmentation::SegmentationDesc_Vectorization::MergeFrom(from.vectorization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Region2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Region2D::CopyFrom(const SegmentationDesc_Region2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Region2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_raster()) {
    if (!this->raster().IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc_Region2D::Swap(SegmentationDesc_Region2D* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(raster_, other->raster_);
    std::swap(shape_moments_, other->shape_moments_);
    std::swap(vectorization_, other->vectorization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Region2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Region2D_descriptor_;
  metadata.reflection = SegmentationDesc_Region2D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_CompoundRegion::kIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kSizeFieldNumber;
const int SegmentationDesc_CompoundRegion::kNeighborIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kParentIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kChildIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kStartFrameFieldNumber;
const int SegmentationDesc_CompoundRegion::kEndFrameFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_CompoundRegion::SegmentationDesc_CompoundRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_CompoundRegion::InitAsDefaultInstance() {
}

SegmentationDesc_CompoundRegion::SegmentationDesc_CompoundRegion(const SegmentationDesc_CompoundRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_CompoundRegion::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  size_ = 0;
  parent_id_ = -1;
  start_frame_ = 0;
  end_frame_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_CompoundRegion::~SegmentationDesc_CompoundRegion() {
  SharedDtor();
}

void SegmentationDesc_CompoundRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_CompoundRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_CompoundRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_CompoundRegion_descriptor_;
}

const SegmentationDesc_CompoundRegion& SegmentationDesc_CompoundRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_CompoundRegion* SegmentationDesc_CompoundRegion::default_instance_ = NULL;

SegmentationDesc_CompoundRegion* SegmentationDesc_CompoundRegion::New() const {
  return new SegmentationDesc_CompoundRegion;
}

void SegmentationDesc_CompoundRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    size_ = 0;
    parent_id_ = -1;
    start_frame_ = 0;
    end_frame_ = 0;
  }
  neighbor_id_.Clear();
  child_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_CompoundRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_neighbor_id;
        break;
      }

      // repeated int32 neighbor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_neighbor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_neighbor_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_neighbor_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_neighbor_id;
        if (input->ExpectTag(32)) goto parse_parent_id;
        break;
      }

      // optional int32 parent_id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_child_id;
        break;
      }

      // repeated int32 child_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_child_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_child_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_child_id;
        if (input->ExpectTag(48)) goto parse_start_frame;
        break;
      }

      // optional int32 start_frame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_frame_)));
          set_has_start_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_frame;
        break;
      }

      // optional int32 end_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_frame_)));
          set_has_end_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_CompoundRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // repeated int32 neighbor_id = 3;
  for (int i = 0; i < this->neighbor_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->neighbor_id(i), output);
  }

  // optional int32 parent_id = 4 [default = -1];
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parent_id(), output);
  }

  // repeated int32 child_id = 5;
  for (int i = 0; i < this->child_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->child_id(i), output);
  }

  // optional int32 start_frame = 6;
  if (has_start_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start_frame(), output);
  }

  // optional int32 end_frame = 7;
  if (has_end_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->end_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_CompoundRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // repeated int32 neighbor_id = 3;
  for (int i = 0; i < this->neighbor_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->neighbor_id(i), target);
  }

  // optional int32 parent_id = 4 [default = -1];
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parent_id(), target);
  }

  // repeated int32 child_id = 5;
  for (int i = 0; i < this->child_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->child_id(i), target);
  }

  // optional int32 start_frame = 6;
  if (has_start_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start_frame(), target);
  }

  // optional int32 end_frame = 7;
  if (has_end_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->end_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_CompoundRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 parent_id = 4 [default = -1];
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional int32 start_frame = 6;
    if (has_start_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_frame());
    }

    // optional int32 end_frame = 7;
    if (has_end_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_frame());
    }

  }
  // repeated int32 neighbor_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->neighbor_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->neighbor_id(i));
    }
    total_size += 1 * this->neighbor_id_size() + data_size;
  }

  // repeated int32 child_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->child_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->child_id(i));
    }
    total_size += 1 * this->child_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_CompoundRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_CompoundRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_CompoundRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_CompoundRegion::MergeFrom(const SegmentationDesc_CompoundRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  neighbor_id_.MergeFrom(from.neighbor_id_);
  child_id_.MergeFrom(from.child_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_start_frame()) {
      set_start_frame(from.start_frame());
    }
    if (from.has_end_frame()) {
      set_end_frame(from.end_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_CompoundRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_CompoundRegion::CopyFrom(const SegmentationDesc_CompoundRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_CompoundRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SegmentationDesc_CompoundRegion::Swap(SegmentationDesc_CompoundRegion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    neighbor_id_.Swap(&other->neighbor_id_);
    std::swap(parent_id_, other->parent_id_);
    child_id_.Swap(&other->child_id_);
    std::swap(start_frame_, other->start_frame_);
    std::swap(end_frame_, other->end_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_CompoundRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_CompoundRegion_descriptor_;
  metadata.reflection = SegmentationDesc_CompoundRegion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_HierarchyLevel::kRegionFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_HierarchyLevel::SegmentationDesc_HierarchyLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_HierarchyLevel::InitAsDefaultInstance() {
}

SegmentationDesc_HierarchyLevel::SegmentationDesc_HierarchyLevel(const SegmentationDesc_HierarchyLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_HierarchyLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_HierarchyLevel::~SegmentationDesc_HierarchyLevel() {
  SharedDtor();
}

void SegmentationDesc_HierarchyLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_HierarchyLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_HierarchyLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_HierarchyLevel_descriptor_;
}

const SegmentationDesc_HierarchyLevel& SegmentationDesc_HierarchyLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_HierarchyLevel* SegmentationDesc_HierarchyLevel::default_instance_ = NULL;

SegmentationDesc_HierarchyLevel* SegmentationDesc_HierarchyLevel::New() const {
  return new SegmentationDesc_HierarchyLevel;
}

void SegmentationDesc_HierarchyLevel::Clear() {
  region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_HierarchyLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .segmentation.SegmentationDesc.CompoundRegion region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_HierarchyLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .segmentation.SegmentationDesc.CompoundRegion region = 2;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_HierarchyLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .segmentation.SegmentationDesc.CompoundRegion region = 2;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_HierarchyLevel::ByteSize() const {
  int total_size = 0;

  // repeated .segmentation.SegmentationDesc.CompoundRegion region = 2;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_HierarchyLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_HierarchyLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_HierarchyLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_HierarchyLevel::MergeFrom(const SegmentationDesc_HierarchyLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_HierarchyLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_HierarchyLevel::CopyFrom(const SegmentationDesc_HierarchyLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_HierarchyLevel::IsInitialized() const {

  for (int i = 0; i < region_size(); i++) {
    if (!this->region(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc_HierarchyLevel::Swap(SegmentationDesc_HierarchyLevel* other) {
  if (other != this) {
    region_.Swap(&other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_HierarchyLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_HierarchyLevel_descriptor_;
  metadata.reflection = SegmentationDesc_HierarchyLevel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc::kRegionFieldNumber;
const int SegmentationDesc::kHierarchyFieldNumber;
const int SegmentationDesc::kFrameWidthFieldNumber;
const int SegmentationDesc::kFrameHeightFieldNumber;
const int SegmentationDesc::kChunkSizeFieldNumber;
const int SegmentationDesc::kOverlapStartFieldNumber;
const int SegmentationDesc::kChunkIdFieldNumber;
const int SegmentationDesc::kHierarchyFrameIdxFieldNumber;
const int SegmentationDesc::kFeaturesFieldNumber;
const int SegmentationDesc::kVectorMeshFieldNumber;
const int SegmentationDesc::kConnectednessFieldNumber;
const int SegmentationDesc::kRasterizationRemovedFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc::SegmentationDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc::InitAsDefaultInstance() {
  vector_mesh_ = const_cast< ::segmentation::SegmentationDesc_VectorMesh*>(&::segmentation::SegmentationDesc_VectorMesh::default_instance());
}

SegmentationDesc::SegmentationDesc(const SegmentationDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc::SharedCtor() {
  _cached_size_ = 0;
  frame_width_ = 0;
  frame_height_ = 0;
  chunk_size_ = 0;
  overlap_start_ = 0;
  chunk_id_ = -1;
  hierarchy_frame_idx_ = 0;
  vector_mesh_ = NULL;
  connectedness_ = 1;
  rasterization_removed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc::~SegmentationDesc() {
  SharedDtor();
}

void SegmentationDesc::SharedDtor() {
  if (this != default_instance_) {
    delete vector_mesh_;
  }
}

void SegmentationDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_descriptor_;
}

const SegmentationDesc& SegmentationDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc* SegmentationDesc::default_instance_ = NULL;

SegmentationDesc* SegmentationDesc::New() const {
  return new SegmentationDesc;
}

void SegmentationDesc::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    frame_width_ = 0;
    frame_height_ = 0;
    chunk_size_ = 0;
    overlap_start_ = 0;
    chunk_id_ = -1;
    hierarchy_frame_idx_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_vector_mesh()) {
      if (vector_mesh_ != NULL) vector_mesh_->::segmentation::SegmentationDesc_VectorMesh::Clear();
    }
    connectedness_ = 1;
    rasterization_removed_ = false;
  }
  region_.Clear();
  hierarchy_.Clear();
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .segmentation.SegmentationDesc.Region2D region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region;
        if (input->ExpectTag(26)) goto parse_hierarchy;
        break;
      }

      // repeated .segmentation.SegmentationDesc.HierarchyLevel hierarchy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hierarchy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hierarchy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hierarchy;
        if (input->ExpectTag(32)) goto parse_frame_width;
        break;
      }

      // optional int32 frame_width = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_width_)));
          set_has_frame_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frame_height;
        break;
      }

      // optional int32 frame_height = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_height_)));
          set_has_frame_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chunk_size;
        break;
      }

      // optional int32 chunk_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_size_)));
          set_has_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_overlap_start;
        break;
      }

      // optional int32 overlap_start = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlap_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlap_start_)));
          set_has_overlap_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_chunk_id;
        break;
      }

      // optional int32 chunk_id = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_id_)));
          set_has_chunk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hierarchy_frame_idx;
        break;
      }

      // optional int32 hierarchy_frame_idx = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hierarchy_frame_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hierarchy_frame_idx_)));
          set_has_hierarchy_frame_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_features;
        break;
      }

      // repeated .segmentation.RegionFeatures features = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_features;
        if (input->ExpectTag(90)) goto parse_vector_mesh;
        break;
      }

      // optional .segmentation.SegmentationDesc.VectorMesh vector_mesh = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector_mesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_connectedness;
        break;
      }

      // optional .segmentation.SegmentationDesc.Connectedness connectedness = 12 [default = N4_CONNECT];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectedness:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::segmentation::SegmentationDesc_Connectedness_IsValid(value)) {
            set_connectedness(static_cast< ::segmentation::SegmentationDesc_Connectedness >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rasterization_removed;
        break;
      }

      // optional bool rasterization_removed = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rasterization_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rasterization_removed_)));
          set_has_rasterization_removed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .segmentation.SegmentationDesc.Region2D region = 2;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region(i), output);
  }

  // repeated .segmentation.SegmentationDesc.HierarchyLevel hierarchy = 3;
  for (int i = 0; i < this->hierarchy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hierarchy(i), output);
  }

  // optional int32 frame_width = 4 [default = 0];
  if (has_frame_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frame_width(), output);
  }

  // optional int32 frame_height = 5 [default = 0];
  if (has_frame_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frame_height(), output);
  }

  // optional int32 chunk_size = 6;
  if (has_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chunk_size(), output);
  }

  // optional int32 overlap_start = 7;
  if (has_overlap_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->overlap_start(), output);
  }

  // optional int32 chunk_id = 8 [default = -1];
  if (has_chunk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->chunk_id(), output);
  }

  // optional int32 hierarchy_frame_idx = 9 [default = 0];
  if (has_hierarchy_frame_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hierarchy_frame_idx(), output);
  }

  // repeated .segmentation.RegionFeatures features = 10;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->features(i), output);
  }

  // optional .segmentation.SegmentationDesc.VectorMesh vector_mesh = 11;
  if (has_vector_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vector_mesh(), output);
  }

  // optional .segmentation.SegmentationDesc.Connectedness connectedness = 12 [default = N4_CONNECT];
  if (has_connectedness()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->connectedness(), output);
  }

  // optional bool rasterization_removed = 13 [default = false];
  if (has_rasterization_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->rasterization_removed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .segmentation.SegmentationDesc.Region2D region = 2;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region(i), target);
  }

  // repeated .segmentation.SegmentationDesc.HierarchyLevel hierarchy = 3;
  for (int i = 0; i < this->hierarchy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hierarchy(i), target);
  }

  // optional int32 frame_width = 4 [default = 0];
  if (has_frame_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frame_width(), target);
  }

  // optional int32 frame_height = 5 [default = 0];
  if (has_frame_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frame_height(), target);
  }

  // optional int32 chunk_size = 6;
  if (has_chunk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chunk_size(), target);
  }

  // optional int32 overlap_start = 7;
  if (has_overlap_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->overlap_start(), target);
  }

  // optional int32 chunk_id = 8 [default = -1];
  if (has_chunk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->chunk_id(), target);
  }

  // optional int32 hierarchy_frame_idx = 9 [default = 0];
  if (has_hierarchy_frame_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hierarchy_frame_idx(), target);
  }

  // repeated .segmentation.RegionFeatures features = 10;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->features(i), target);
  }

  // optional .segmentation.SegmentationDesc.VectorMesh vector_mesh = 11;
  if (has_vector_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vector_mesh(), target);
  }

  // optional .segmentation.SegmentationDesc.Connectedness connectedness = 12 [default = N4_CONNECT];
  if (has_connectedness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->connectedness(), target);
  }

  // optional bool rasterization_removed = 13 [default = false];
  if (has_rasterization_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->rasterization_removed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 frame_width = 4 [default = 0];
    if (has_frame_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_width());
    }

    // optional int32 frame_height = 5 [default = 0];
    if (has_frame_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_height());
    }

    // optional int32 chunk_size = 6;
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_size());
    }

    // optional int32 overlap_start = 7;
    if (has_overlap_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlap_start());
    }

    // optional int32 chunk_id = 8 [default = -1];
    if (has_chunk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_id());
    }

    // optional int32 hierarchy_frame_idx = 9 [default = 0];
    if (has_hierarchy_frame_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hierarchy_frame_idx());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .segmentation.SegmentationDesc.VectorMesh vector_mesh = 11;
    if (has_vector_mesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector_mesh());
    }

    // optional .segmentation.SegmentationDesc.Connectedness connectedness = 12 [default = N4_CONNECT];
    if (has_connectedness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectedness());
    }

    // optional bool rasterization_removed = 13 [default = false];
    if (has_rasterization_removed()) {
      total_size += 1 + 1;
    }

  }
  // repeated .segmentation.SegmentationDesc.Region2D region = 2;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  // repeated .segmentation.SegmentationDesc.HierarchyLevel hierarchy = 3;
  total_size += 1 * this->hierarchy_size();
  for (int i = 0; i < this->hierarchy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hierarchy(i));
  }

  // repeated .segmentation.RegionFeatures features = 10;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc::MergeFrom(const SegmentationDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  hierarchy_.MergeFrom(from.hierarchy_);
  features_.MergeFrom(from.features_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_frame_width()) {
      set_frame_width(from.frame_width());
    }
    if (from.has_frame_height()) {
      set_frame_height(from.frame_height());
    }
    if (from.has_chunk_size()) {
      set_chunk_size(from.chunk_size());
    }
    if (from.has_overlap_start()) {
      set_overlap_start(from.overlap_start());
    }
    if (from.has_chunk_id()) {
      set_chunk_id(from.chunk_id());
    }
    if (from.has_hierarchy_frame_idx()) {
      set_hierarchy_frame_idx(from.hierarchy_frame_idx());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_vector_mesh()) {
      mutable_vector_mesh()->::segmentation::SegmentationDesc_VectorMesh::MergeFrom(from.vector_mesh());
    }
    if (from.has_connectedness()) {
      set_connectedness(from.connectedness());
    }
    if (from.has_rasterization_removed()) {
      set_rasterization_removed(from.rasterization_removed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc::CopyFrom(const SegmentationDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc::IsInitialized() const {

  for (int i = 0; i < region_size(); i++) {
    if (!this->region(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hierarchy_size(); i++) {
    if (!this->hierarchy(i).IsInitialized()) return false;
  }
  for (int i = 0; i < features_size(); i++) {
    if (!this->features(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc::Swap(SegmentationDesc* other) {
  if (other != this) {
    region_.Swap(&other->region_);
    hierarchy_.Swap(&other->hierarchy_);
    std::swap(frame_width_, other->frame_width_);
    std::swap(frame_height_, other->frame_height_);
    std::swap(chunk_size_, other->chunk_size_);
    std::swap(overlap_start_, other->overlap_start_);
    std::swap(chunk_id_, other->chunk_id_);
    std::swap(hierarchy_frame_idx_, other->hierarchy_frame_idx_);
    features_.Swap(&other->features_);
    std::swap(vector_mesh_, other->vector_mesh_);
    std::swap(connectedness_, other->connectedness_);
    std::swap(rasterization_removed_, other->rasterization_removed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_descriptor_;
  metadata.reflection = SegmentationDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int AppearanceFeature::kAppearanceFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::segmentation::RegionFeatures,
    ::google::protobuf::internal::MessageTypeTraits< ::segmentation::AppearanceFeature >, 11, false >
  AppearanceFeature::appearance(kAppearanceFieldNumber, ::segmentation::AppearanceFeature::default_instance());
AppearanceFeature::AppearanceFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppearanceFeature::InitAsDefaultInstance() {
}

AppearanceFeature::AppearanceFeature(const AppearanceFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppearanceFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceFeature::~AppearanceFeature() {
  SharedDtor();
}

void AppearanceFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceFeature_descriptor_;
}

const AppearanceFeature& AppearanceFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

AppearanceFeature* AppearanceFeature::default_instance_ = NULL;

AppearanceFeature* AppearanceFeature::New() const {
  return new AppearanceFeature;
}

void AppearanceFeature::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AppearanceFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppearanceFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppearanceFeature::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceFeature::MergeFrom(const AppearanceFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFeature::CopyFrom(const AppearanceFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFeature::IsInitialized() const {

  return true;
}

void AppearanceFeature::Swap(AppearanceFeature* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceFeature_descriptor_;
  metadata.reflection = AppearanceFeature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int FlowFeature::kFlowFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::segmentation::RegionFeatures,
    ::google::protobuf::internal::MessageTypeTraits< ::segmentation::FlowFeature >, 11, false >
  FlowFeature::flow(kFlowFieldNumber, ::segmentation::FlowFeature::default_instance());
FlowFeature::FlowFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlowFeature::InitAsDefaultInstance() {
}

FlowFeature::FlowFeature(const FlowFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlowFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowFeature::~FlowFeature() {
  SharedDtor();
}

void FlowFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlowFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowFeature_descriptor_;
}

const FlowFeature& FlowFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

FlowFeature* FlowFeature::default_instance_ = NULL;

FlowFeature* FlowFeature::New() const {
  return new FlowFeature;
}

void FlowFeature::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FlowFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlowFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlowFeature::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowFeature::MergeFrom(const FlowFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowFeature::CopyFrom(const FlowFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowFeature::IsInitialized() const {

  return true;
}

void FlowFeature::Swap(FlowFeature* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowFeature_descriptor_;
  metadata.reflection = FlowFeature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TextureFeature::kTextureFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::segmentation::RegionFeatures,
    ::google::protobuf::internal::MessageTypeTraits< ::segmentation::TextureFeature >, 11, false >
  TextureFeature::texture(kTextureFieldNumber, ::segmentation::TextureFeature::default_instance());
TextureFeature::TextureFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextureFeature::InitAsDefaultInstance() {
}

TextureFeature::TextureFeature(const TextureFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextureFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextureFeature::~TextureFeature() {
  SharedDtor();
}

void TextureFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TextureFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextureFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextureFeature_descriptor_;
}

const TextureFeature& TextureFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

TextureFeature* TextureFeature::default_instance_ = NULL;

TextureFeature* TextureFeature::New() const {
  return new TextureFeature;
}

void TextureFeature::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextureFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TextureFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextureFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextureFeature::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextureFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextureFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextureFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextureFeature::MergeFrom(const TextureFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextureFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureFeature::CopyFrom(const TextureFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureFeature::IsInitialized() const {

  return true;
}

void TextureFeature::Swap(TextureFeature* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextureFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextureFeature_descriptor_;
  metadata.reflection = TextureFeature_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace segmentation

// @@protoc_insertion_point(global_scope)
